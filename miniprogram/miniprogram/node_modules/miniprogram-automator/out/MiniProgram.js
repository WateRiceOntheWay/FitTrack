"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0});const Page_1=__importDefault(require("./Page")),Native_1=__importDefault(require("./Native")),events_1=require("events"),util_1=require("./util"),cmpVersion_1=__importDefault(require("licia/cmpVersion")),startWith_1=__importDefault(require("licia/startWith")),isFn_1=__importDefault(require("licia/isFn")),trim_1=__importDefault(require("licia/trim")),isStr_1=__importDefault(require("licia/isStr")),fs_1=__importDefault(require("licia/fs")),pkg=require("../package.json");class MiniProgram extends events_1.EventEmitter{constructor(t){super(),this.pageMap=new Map,this.onLogAdded=t=>{this.emit("console",t)},this.onBindingCalled=t=>{const{name:e,args:i}=t;try{const t=this.appBindings.get(e);t&&t(...i)}catch(t){}},this.onExceptionThrown=t=>{this.emit("exception",t)},this.connection=t,this.connection.on("App.logAdded",this.onLogAdded),this.connection.on("App.bindingCalled",this.onBindingCalled),this.connection.on("App.exceptionThrown",this.onExceptionThrown),this.appBindings=new Map}async pageStack(){const{pageStack:t}=await this.send("App.getPageStack");return t.map((t=>Page_1.default.create(this.connection,{id:t.pageId,path:t.path,query:t.query},this.pageMap)))}async navigateTo(t){return await this.changeRoute("navigateTo",t)}async redirectTo(t){return await this.changeRoute("redirectTo",t)}async navigateBack(){return await this.changeRoute("navigateBack")}async reLaunch(t){return await this.changeRoute("reLaunch",t)}async switchTab(t){return await this.changeRoute("switchTab",t)}async currentPage(){const{pageId:t,path:e,query:i}=await this.send("App.getCurrentPage");return Page_1.default.create(this.connection,{id:t,path:e,query:i},this.pageMap)}async systemInfo(){return await this.callWxMethod("getSystemInfoSync")}async callWxMethod(t,...e){return(await this.send("App.callWxMethod",{method:t,args:e})).result}async mockWxMethod(t,e,...i){isFn_1.default(e)||isFnStr(e)?await this.send("App.mockWxMethod",{method:t,functionDeclaration:e.toString(),args:i}):await this.send("App.mockWxMethod",{method:t,result:e})}async restoreWxMethod(t){await this.send("App.mockWxMethod",{method:t})}async callPluginWxMethod(t,e,...i){return(await this.send("App.callWxMethod",{method:e,pluginId:t,args:i})).result}async mockPluginWxMethod(t,e,i,...a){isFn_1.default(i)||isFnStr(i)?await this.send("App.mockWxMethod",{method:e,pluginId:t,functionDeclaration:i.toString(),args:a}):await this.send("App.mockWxMethod",{method:e,pluginId:t,result:i})}async restorePluginWxMethod(t,e){await this.send("App.mockWxMethod",{method:e,pluginId:t})}async evaluate(t,...e){const{result:i}=await this.send("App.callFunction",{functionDeclaration:t.toString(),args:e});return i}async pageScrollTo(t){await this.callWxMethod("pageScrollTo",{scrollTop:t,duration:0})}async close(){try{await this.send("App.exit")}catch(t){}await sleep(1e3),await this.send("Tool.close"),this.disconnect()}async remote(t=!1){const{qrCode:e}=await this.send("Tool.enableRemoteDebug",{auto:t});return e&&await util_1.printQrCode(await util_1.decodeQrCode(e)),new Promise((t=>{this.connection.once("Tool.onRemoteDebugConnected",(async()=>{await sleep(1e3),t()}))}))}disconnect(){this.connection.dispose()}on(t,e){return"console"===t&&this.send("App.enableLog"),super.on(t,e),this}async exposeFunction(t,e){if(this.appBindings.has(t))throw Error(`Failed to expose function with name ${t}: already exists!`);this.appBindings.set(t,e),await this.send("App.addBinding",{name:t})}async checkVersion(){let t="";if(t=(await this.send("Tool.getInfo")).SDKVersion,"dev"!==t&&cmpVersion_1.default(t,"2.7.3")<0)throw Error(`SDKVersion is currently ${t}, while automator(${pkg.version}) requires at least version 2.7.3`)}async screenshot(t={}){const{data:e}=await this.send("App.captureScreenshot");if(!t.path)return e;await fs_1.default.writeFile(t.path,e,"base64")}async testAccounts(){return(await this.send("Tool.getTestAccounts")).accounts}async stopAudits(t={}){const e=await this.send("Tool.stopAudits");return t.path&&await fs_1.default.writeFile(t.path,e.report,"utf8"),JSON.parse(e.data)}async getTicket(){return await this.send("Tool.getTicket")}async setTicket(t){await this.send("Tool.setTicket",{ticket:t})}async refreshTicket(){await this.send("Tool.refreshTicket")}native(){return this.nativeIns||(this.nativeIns=new Native_1.default(this.connection)),this.nativeIns}async changeRoute(t,e){const i=await this.currentPage();if(i&&util_1.isPluginPath(i.path)){const a=util_1.extractPluginId(i.path);await this.callPluginWxMethod(a,t,{url:e})}else await this.callWxMethod(t,{url:e});return await sleep(3e3),await this.currentPage()}async send(t,e={}){return await this.connection.send(t,e)}}function sleep(t){return new Promise((e=>setTimeout(e,t)))}function isFnStr(t){return!!isStr_1.default(t)&&(t=trim_1.default(t),startWith_1.default(t,"function")||startWith_1.default(t,"() =>"))}exports.default=MiniProgram;